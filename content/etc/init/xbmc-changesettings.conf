start on starting xbmc-exits

env JOB

task

script
	if [ "$JOB" = "xbmc-exits" ]; then
		[ ! -e /etc/default/xbmc ] || . /etc/default/xbmc
		[ -d /home/xbian/.kodi ] && PROFDIR="/home/xbian/.kodi" || PROFDIR="/home/xbian/.xbmc"
		IFS='
'
		# We need event server running for proper operation, so turn it on again if disabled
		#
		for f in $PROFDIR/userdata/guisettings.xml $(find $PROFDIR/userdata/profiles/*/guisettings.xml 2>/dev/null); do
			grep -q "<esenabled.*>true<" "$f" || sed -i --follow-symlinks 's:<esenabled.*:<esenabled default="true">true</esenabled>:g' "$f" || :
			grep -q "<upnprenderer.*>true<" "$f" || sed -i --follow-symlinks 's:<upnprenderer.*:<upnprenderer default="true">true</upnprenderer>:g' "$f" || :
		done

		# Get OSDNAME from Kodi's profile data (last loaded profile or master profile) and store it into /etc/default/xbmc
		# keep recent file containing 'device_name' only, older ones are removed
		#
		if [ -e $PROFDIR/userdata/profiles.xml ]; then
			id=$(awk -F '[><]' '/lastloaded/{print $3}' $PROFDIR/userdata/profiles.xml)
			if [ "$id" \> 0 ]; then
				LASTPROFILE=$(grep -A1 "<id>$id</id>" $PROFDIR/userdata/profiles.xml | awk -F '[><]' '/name/{print $3}')
				for f in $(find $PROFDIR/userdata/profiles/$LASTPROFILE/peripheral_data/*.xml -exec ls -t {} + 2>/dev/null); do
					if [ -z "$cOSDNAME" ]; then
						cOSDNAME="$(awk -F '"' '/device_name/{print $4}' "$f")"
					elif grep -q device_name "$f"; then
						rm -f "$f"
					fi
				done
			fi
		fi
		for f in $(find $PROFDIR/userdata/peripheral_data/*.xml -exec ls -t {} + 2>/dev/null); do
			if [ -z "$cOSDNAME" ]; then
				cOSDNAME="$(awk -F '"' '/device_name/{print $4}' "$f")"
			elif grep -q device_name "$f"; then
				rm -f "$f"
			fi
		done
		[ -n "$cOSDNAME" ] || cOSDNAME="$(hostname)"
		if [ "$OSDNAME" != "$cOSDNAME" ]; then
			if grep -q ^OSDNAME= /etc/default/xbmc ]; then
				sed -i "s:^OSDNAME=.*:OSDNAME=$cOSDNAME:g" /etc/default/xbmc
			else
				echo "OSDNAME=$cOSDNAME" >> /etc/default/xbmc
			fi
		fi

		if [ "$SCREENOFF$XBMCOFF" = yesyes ]; then
			#
			# Save previous standby_pc_on_tv_standby settings from Kodi's profile (last loaded profile preferred) in /etc/default/xbmc
			# and set it to value 13009 in all profiles found
			#
			for f in $PROFDIR/userdata/profiles/*/peripheral_data/*.xml $PROFDIR/userdata/peripheral_data/*.xml; do
				if grep -q '<setting id="standby_pc_on_tv_standby' "$f" && ! grep -q '<setting id="standby_pc_on_tv_standby" value="13009" />' "$f"; then
					ct=$(awk -F '"' '/standby_pc_on_tv_standby/{print $4}' "$f")
					[ -z "$ct" ] || ctSPOTS=$ct
					if [ -n "$ctSPOTS" ] && [ -z "${f##*$PROFDIR/userdata/profiles/$LASTPROFILE/peripheral_data/*}" ]; then
						cSPOTS=$ctSPOTS
						ctSPOTS=''
					fi
					sed -i 's%<setting id="standby_pc_on_tv_standby.*%<setting id="standby_pc_on_tv_standby" value="13009" />%g' "$f"
				fi
			done
			[ -n "$cSPOTS" ] || cSPOTS=$ctSPOTS
			if [ "$SPOTS" != "$cSPOTS" ]; then
				if grep -q ^SPOTS= /etc/default/xbmc ]; then
					sed -i "s/^SPOTS=.*/SPOTS=$cSPOTS/g" /etc/default/xbmc
				else
					echo "SPOTS=$cSPOTS" >> /etc/default/xbmc
				fi
			fi
		elif [ -n "$SPOTS" ]; then
			#
			# Recover saved standby_pc_on_tv_standby setting, write it to all Kodi profiles
			#
			for f in $PROFDIR/userdata/profiles/*/peripheral_data/*.xml $PROFDIR/userdata/peripheral_data/*.xml; do
				if grep -q '<setting id="standby_pc_on_tv_standby' "$f" && grep -q '<setting id="standby_pc_on_tv_standby" value="13009" />' "$f"; then
					sed -i 's%<setting id="standby_pc_on_tv_standby.*%<setting id="standby_pc_on_tv_standby" value="$SPOTS" />%g' "$f"
				fi
			done
			sed -i "s/SPOTS=.*/SPOTS=/g" /etc/default/xbmc
		fi
	fi

	[ ! -e /run/xbian-config/xbmc-changesettings.sh ] || { sh /run/xbian-config/xbmc-changesettings.sh && rm /run/xbian-config/xbmc-changesettings.sh; } || :
end script
